/* tslint:disable */
/* eslint-disable */
/**
 * Freshify API Documentation
 * An API for creating and managing a household inventory and shopping list. The API is written in Java using the Spring Boot framework. The API uses a MySQL database. The API is documented using Swagger. The API is hosted using Apache. Some useful links: - [The GitLab repository](https://gitlab.stud.idi.ntnu.no/idatt2106-v23-10/smartmat-backend)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: vkbugge@hotmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from "../base";
import { CreateHousehold } from "../models";
import { Household } from "../models";
import { HouseholdMember } from "../models";
import { IdUsersBody } from "../models";
import { InlineResponse2001 } from "../models";
import { UpdateHouseholdUserType } from "../models";
import { WastedItemDTO } from "../models";
/**
 * HouseholdApi - axios parameter creator
 * @export
 */
export const HouseholdApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Adds a user to the household. Can only be done by a superuser
     * @summary Add user
     * @param {number} id ID of household to add a user to
     * @param {IdUsersBody} [body] User to add to the household
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUser: async (
      id: number,
      body?: IdUsersBody,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling addUser."
        );
      }
      const localVarPath = `/household/{id}/users`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Creates a household
     * @summary Create a household
     * @param {CreateHousehold} [body] The household to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createHousehold: async (
      body?: CreateHousehold,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/household`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Deletes a household. Can only be done by superusers.
     * @summary Delete a household
     * @param {number} id ID of household to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteHousehold: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling deleteHousehold."
        );
      }
      const localVarPath = `/household/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Returns a single household
     * @summary Get household by id
     * @param {number} id ID of household to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHouseholdById: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling getHouseholdById."
        );
      }
      const localVarPath = `/household/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Gets a list of households of a given user
     * @summary Get a user's households
     * @param {number} id ID of user to get households from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHouseholds: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling getHouseholds."
        );
      }
      const localVarPath = `/user/{id}/households`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Gets all the users that are member of a household
     * @summary Get household users
     * @param {number} id ID of household to get users from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling getUsers."
        );
      }
      const localVarPath = `/household/{id}/users`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Returns lists of household waste
     * @summary Returns a list of household waste
     * @param {number} id ID of household to get waste from
     * @param {string} [startDate] Start date for the time interval (YYYY-MM-DD)
     * @param {string} [endDate] End date for the time interval (YYYY-MM-DD)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    householdIdInventoryWasteGet: async (
      id: number,
      startDate?: string,
      endDate?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling householdIdInventoryWasteGet."
        );
      }
      const localVarPath = `/household/{id}/inventory/waste`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (startDate !== undefined) {
        localVarQueryParameter["start_date"] = startDate;
      }

      if (endDate !== undefined) {
        localVarQueryParameter["end_date"] = endDate;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Gets a list of average amount wasted per month
     * @summary Gets a list of average amount wasted per month
     * @param {number} id ID of household to get waste from
     * @param {number} numMonths The number of months backward to process. The returned list starts at the current month for index 0, the previous month for index 1 etc...
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    householdIdInventoryWastePerMonthGet: async (
      id: number,
      numMonths: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling householdIdInventoryWastePerMonthGet."
        );
      }
      // verify required parameter 'numMonths' is not null or undefined
      if (numMonths === null || numMonths === undefined) {
        throw new RequiredError(
          "numMonths",
          "Required parameter numMonths was null or undefined when calling householdIdInventoryWastePerMonthGet."
        );
      }
      const localVarPath = `/household/{id}/inventory/waste-per-month`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (numMonths !== undefined) {
        localVarQueryParameter["num_months"] = numMonths;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Removes a user from a household. Can only be done by a superuser or the user themselves
     * @summary Remove a user from a household
     * @param {number} id ID of household to delete a user from
     * @param {number} userId ID of user to delete from the household
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserFromHousehold: async (
      id: number,
      userId: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling removeUserFromHousehold."
        );
      }
      // verify required parameter 'userId' is not null or undefined
      if (userId === null || userId === undefined) {
        throw new RequiredError(
          "userId",
          "Required parameter userId was null or undefined when calling removeUserFromHousehold."
        );
      }
      const localVarPath = `/household/{id}/users/{userId}`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Updates the household's attributes. Can only be done by a superuser
     * @summary Update household
     * @param {number} id ID of household to update
     * @param {Household} [body] The household to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateHousehold: async (
      id: number,
      body?: Household,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling updateHousehold."
        );
      }
      const localVarPath = `/household/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Updates the role of a user withing a given household. Can only be done by a superuser
     * @summary Update household member role of user
     * @param {number} id ID of household to update a user type in
     * @param {UpdateHouseholdUserType} [body] Updated the type of user in the household
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateHouseholdMemberRole: async (
      id: number,
      body?: UpdateHouseholdUserType,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling updateHouseholdMemberRole."
        );
      }
      const localVarPath = `/household/{id}/users`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * HouseholdApi - functional programming interface
 * @export
 */
export const HouseholdApiFp = function (configuration?: Configuration) {
  return {
    /**
     * Adds a user to the household. Can only be done by a superuser
     * @summary Add user
     * @param {number} id ID of household to add a user to
     * @param {IdUsersBody} [body] User to add to the household
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addUser(
      id: number,
      body?: IdUsersBody,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
      const localVarAxiosArgs = await HouseholdApiAxiosParamCreator(configuration).addUser(
        id,
        body,
        options
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Creates a household
     * @summary Create a household
     * @param {CreateHousehold} [body] The household to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createHousehold(
      body?: CreateHousehold,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Household>>> {
      const localVarAxiosArgs = await HouseholdApiAxiosParamCreator(configuration).createHousehold(
        body,
        options
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Deletes a household. Can only be done by superusers.
     * @summary Delete a household
     * @param {number} id ID of household to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteHousehold(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
      const localVarAxiosArgs = await HouseholdApiAxiosParamCreator(configuration).deleteHousehold(
        id,
        options
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Returns a single household
     * @summary Get household by id
     * @param {number} id ID of household to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getHouseholdById(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Household>>> {
      const localVarAxiosArgs = await HouseholdApiAxiosParamCreator(configuration).getHouseholdById(
        id,
        options
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Gets a list of households of a given user
     * @summary Get a user's households
     * @param {number} id ID of user to get households from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getHouseholds(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Household>>>
    > {
      const localVarAxiosArgs = await HouseholdApiAxiosParamCreator(configuration).getHouseholds(
        id,
        options
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Gets all the users that are member of a household
     * @summary Get household users
     * @param {number} id ID of household to get users from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUsers(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<Array<InlineResponse2001>>>
    > {
      const localVarAxiosArgs = await HouseholdApiAxiosParamCreator(configuration).getUsers(
        id,
        options
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Returns lists of household waste
     * @summary Returns a list of household waste
     * @param {number} id ID of household to get waste from
     * @param {string} [startDate] Start date for the time interval (YYYY-MM-DD)
     * @param {string} [endDate] End date for the time interval (YYYY-MM-DD)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async householdIdInventoryWasteGet(
      id: number,
      startDate?: string,
      endDate?: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<any>>>> {
      const localVarAxiosArgs = await HouseholdApiAxiosParamCreator(
        configuration
      ).householdIdInventoryWasteGet(id, startDate, endDate, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Gets a list of average amount wasted per month
     * @summary Gets a list of average amount wasted per month
     * @param {number} id ID of household to get waste from
     * @param {number} numMonths The number of months backward to process. The returned list starts at the current month for index 0, the previous month for index 1 etc...
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async householdIdInventoryWastePerMonthGet(
      id: number,
      numMonths: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<number>>>
    > {
      const localVarAxiosArgs = await HouseholdApiAxiosParamCreator(
        configuration
      ).householdIdInventoryWastePerMonthGet(id, numMonths, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Removes a user from a household. Can only be done by a superuser or the user themselves
     * @summary Remove a user from a household
     * @param {number} id ID of household to delete a user from
     * @param {number} userId ID of user to delete from the household
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeUserFromHousehold(
      id: number,
      userId: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
      const localVarAxiosArgs = await HouseholdApiAxiosParamCreator(
        configuration
      ).removeUserFromHousehold(id, userId, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Updates the household's attributes. Can only be done by a superuser
     * @summary Update household
     * @param {number} id ID of household to update
     * @param {Household} [body] The household to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateHousehold(
      id: number,
      body?: Household,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
      const localVarAxiosArgs = await HouseholdApiAxiosParamCreator(configuration).updateHousehold(
        id,
        body,
        options
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Updates the role of a user withing a given household. Can only be done by a superuser
     * @summary Update household member role of user
     * @param {number} id ID of household to update a user type in
     * @param {UpdateHouseholdUserType} [body] Updated the type of user in the household
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateHouseholdMemberRole(
      id: number,
      body?: UpdateHouseholdUserType,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<HouseholdMember>>
    > {
      const localVarAxiosArgs = await HouseholdApiAxiosParamCreator(
        configuration
      ).updateHouseholdMemberRole(id, body, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * HouseholdApi - factory interface
 * @export
 */
export const HouseholdApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     * Adds a user to the household. Can only be done by a superuser
     * @summary Add user
     * @param {number} id ID of household to add a user to
     * @param {IdUsersBody} [body] User to add to the household
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addUser(
      id: number,
      body?: IdUsersBody,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<void>> {
      return HouseholdApiFp(configuration)
        .addUser(id, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Creates a household
     * @summary Create a household
     * @param {CreateHousehold} [body] The household to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createHousehold(
      body?: CreateHousehold,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<Household>> {
      return HouseholdApiFp(configuration)
        .createHousehold(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Deletes a household. Can only be done by superusers.
     * @summary Delete a household
     * @param {number} id ID of household to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteHousehold(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
      return HouseholdApiFp(configuration)
        .deleteHousehold(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Returns a single household
     * @summary Get household by id
     * @param {number} id ID of household to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getHouseholdById(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<Household>> {
      return HouseholdApiFp(configuration)
        .getHouseholdById(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Gets a list of households of a given user
     * @summary Get a user's households
     * @param {number} id ID of user to get households from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getHouseholds(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<Array<Household>>> {
      return HouseholdApiFp(configuration)
        .getHouseholds(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Gets all the users that are member of a household
     * @summary Get household users
     * @param {number} id ID of household to get users from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUsers(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<Array<InlineResponse2001>>> {
      return HouseholdApiFp(configuration)
        .getUsers(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Returns lists of household waste
     * @summary Returns a list of household waste
     * @param {number} id ID of household to get waste from
     * @param {string} [startDate] Start date for the time interval (YYYY-MM-DD)
     * @param {string} [endDate] End date for the time interval (YYYY-MM-DD)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async householdIdInventoryWasteGet(
      id: number,
      startDate?: string,
      endDate?: string,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<Array<any>>> {
      return HouseholdApiFp(configuration)
        .householdIdInventoryWasteGet(id, startDate, endDate, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Gets a list of average amount wasted per month
     * @summary Gets a list of average amount wasted per month
     * @param {number} id ID of household to get waste from
     * @param {number} numMonths The number of months backward to process. The returned list starts at the current month for index 0, the previous month for index 1 etc...
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async householdIdInventoryWastePerMonthGet(
      id: number,
      numMonths: number,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<Array<number>>> {
      return HouseholdApiFp(configuration)
        .householdIdInventoryWastePerMonthGet(id, numMonths, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Removes a user from a household. Can only be done by a superuser or the user themselves
     * @summary Remove a user from a household
     * @param {number} id ID of household to delete a user from
     * @param {number} userId ID of user to delete from the household
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeUserFromHousehold(
      id: number,
      userId: number,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<void>> {
      return HouseholdApiFp(configuration)
        .removeUserFromHousehold(id, userId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Updates the household's attributes. Can only be done by a superuser
     * @summary Update household
     * @param {number} id ID of household to update
     * @param {Household} [body] The household to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateHousehold(
      id: number,
      body?: Household,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<void>> {
      return HouseholdApiFp(configuration)
        .updateHousehold(id, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Updates the role of a user withing a given household. Can only be done by a superuser
     * @summary Update household member role of user
     * @param {number} id ID of household to update a user type in
     * @param {UpdateHouseholdUserType} [body] Updated the type of user in the household
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateHouseholdMemberRole(
      id: number,
      body?: UpdateHouseholdUserType,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<HouseholdMember>> {
      return HouseholdApiFp(configuration)
        .updateHouseholdMemberRole(id, body, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * HouseholdApi - object-oriented interface
 * @export
 * @class HouseholdApi
 * @extends {BaseAPI}
 */
export class HouseholdApi extends BaseAPI {
  /**
   * Adds a user to the household. Can only be done by a superuser
   * @summary Add user
   * @param {number} id ID of household to add a user to
   * @param {IdUsersBody} [body] User to add to the household
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HouseholdApi
   */
  public async addUser(
    id: number,
    body?: IdUsersBody,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<void>> {
    return HouseholdApiFp(this.configuration)
      .addUser(id, body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Creates a household
   * @summary Create a household
   * @param {CreateHousehold} [body] The household to be created
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HouseholdApi
   */
  public async createHousehold(
    body?: CreateHousehold,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<Household>> {
    return HouseholdApiFp(this.configuration)
      .createHousehold(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Deletes a household. Can only be done by superusers.
   * @summary Delete a household
   * @param {number} id ID of household to delete
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HouseholdApi
   */
  public async deleteHousehold(
    id: number,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<void>> {
    return HouseholdApiFp(this.configuration)
      .deleteHousehold(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Returns a single household
   * @summary Get household by id
   * @param {number} id ID of household to return
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HouseholdApi
   */
  public async getHouseholdById(
    id: number,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<Household>> {
    return HouseholdApiFp(this.configuration)
      .getHouseholdById(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Gets a list of households of a given user
   * @summary Get a user's households
   * @param {number} id ID of user to get households from
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HouseholdApi
   */
  public async getHouseholds(
    id: number,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<Array<Household>>> {
    return HouseholdApiFp(this.configuration)
      .getHouseholds(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Gets all the users that are member of a household
   * @summary Get household users
   * @param {number} id ID of household to get users from
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HouseholdApi
   */
  public async getUsers(
    id: number,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<Array<InlineResponse2001>>> {
    return HouseholdApiFp(this.configuration)
      .getUsers(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Returns lists of household waste
   * @summary Returns a list of household waste
   * @param {number} id ID of household to get waste from
   * @param {string} [startDate] Start date for the time interval (YYYY-MM-DD)
   * @param {string} [endDate] End date for the time interval (YYYY-MM-DD)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HouseholdApi
   */
  public async householdIdInventoryWasteGet(
    id: number,
    startDate?: string,
    endDate?: string,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<Array<any>>> {
    return HouseholdApiFp(this.configuration)
      .householdIdInventoryWasteGet(id, startDate, endDate, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Gets a list of average amount wasted per month
   * @summary Gets a list of average amount wasted per month
   * @param {number} id ID of household to get waste from
   * @param {number} numMonths The number of months backward to process. The returned list starts at the current month for index 0, the previous month for index 1 etc...
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HouseholdApi
   */
  public async householdIdInventoryWastePerMonthGet(
    id: number,
    numMonths: number,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<Array<number>>> {
    return HouseholdApiFp(this.configuration)
      .householdIdInventoryWastePerMonthGet(id, numMonths, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Removes a user from a household. Can only be done by a superuser or the user themselves
   * @summary Remove a user from a household
   * @param {number} id ID of household to delete a user from
   * @param {number} userId ID of user to delete from the household
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HouseholdApi
   */
  public async removeUserFromHousehold(
    id: number,
    userId: number,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<void>> {
    return HouseholdApiFp(this.configuration)
      .removeUserFromHousehold(id, userId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Updates the household's attributes. Can only be done by a superuser
   * @summary Update household
   * @param {number} id ID of household to update
   * @param {Household} [body] The household to be updated
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HouseholdApi
   */
  public async updateHousehold(
    id: number,
    body?: Household,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<void>> {
    return HouseholdApiFp(this.configuration)
      .updateHousehold(id, body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Updates the role of a user withing a given household. Can only be done by a superuser
   * @summary Update household member role of user
   * @param {number} id ID of household to update a user type in
   * @param {UpdateHouseholdUserType} [body] Updated the type of user in the household
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HouseholdApi
   */
  public async updateHouseholdMemberRole(
    id: number,
    body?: UpdateHouseholdUserType,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<HouseholdMember>> {
    return HouseholdApiFp(this.configuration)
      .updateHouseholdMemberRole(id, body, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
