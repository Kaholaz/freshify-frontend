/* tslint:disable */
/* eslint-disable */
/**
 * Freshify API Documentation
 * An API for creating and managing a household inventory and shopping list. The API is written in Java using the Spring Boot framework. The API uses a MySQL database. The API is documented using Swagger. The API is hosted using Apache. Some useful links: - [The GitLab repository](https://gitlab.stud.idi.ntnu.no/idatt2106-v23-10/smartmat-backend)
 *
 * OpenAPI spec version: 2.1.2
 * Contact: vkbugge@hotmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { HouseholdRecipeDTO } from '../models';
/**
 * HouseholdRecipeApi - axios parameter creator
 * @export
 */
export const HouseholdRecipeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a recipe as bookmarked to the given household.
         * @summary Adds a recipe to a household
         * @param {number} householdId ID of the household to add the recipe to
         * @param {number} id ID of the recipe to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createHouseholdRecipe: async (householdId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'householdId' is not null or undefined
            if (householdId === null || householdId === undefined) {
                throw new RequiredError('householdId','Required parameter householdId was null or undefined when calling createHouseholdRecipe.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling createHouseholdRecipe.');
            }
            const localVarPath = `/householdrecipe/{householdId}/recipe/{id}`
                .replace(`{${"householdId"}}`, encodeURIComponent(String(householdId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a list of all the households that have been added/bookmarked to a given household
         * @summary Gets all the recipes added/bookmarked to a household
         * @param {number} householdId ID of the household to check for ingredients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHouseholdRecipes: async (householdId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'householdId' is not null or undefined
            if (householdId === null || householdId === undefined) {
                throw new RequiredError('householdId','Required parameter householdId was null or undefined when calling getHouseholdRecipes.');
            }
            const localVarPath = `/householdrecipe/{householdId}/recipe`
                .replace(`{${"householdId"}}`, encodeURIComponent(String(householdId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes a recipe from a household. It will no longer be bookmarked in that household.
         * @summary Removes a recipe from a household
         * @param {number} householdId ID of the household to add the recipe to
         * @param {number} id ID of the recipe to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeHouseholdRecipe: async (householdId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'householdId' is not null or undefined
            if (householdId === null || householdId === undefined) {
                throw new RequiredError('householdId','Required parameter householdId was null or undefined when calling removeHouseholdRecipe.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling removeHouseholdRecipe.');
            }
            const localVarPath = `/householdrecipe/{householdId}/recipe/{id}`
                .replace(`{${"householdId"}}`, encodeURIComponent(String(householdId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HouseholdRecipeApi - functional programming interface
 * @export
 */
export const HouseholdRecipeApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Adds a recipe as bookmarked to the given household.
         * @summary Adds a recipe to a household
         * @param {number} householdId ID of the household to add the recipe to
         * @param {number} id ID of the recipe to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createHouseholdRecipe(householdId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<HouseholdRecipeDTO>>> {
            const localVarAxiosArgs = await HouseholdRecipeApiAxiosParamCreator(configuration).createHouseholdRecipe(householdId, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets a list of all the households that have been added/bookmarked to a given household
         * @summary Gets all the recipes added/bookmarked to a household
         * @param {number} householdId ID of the household to check for ingredients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHouseholdRecipes(householdId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HouseholdRecipeDTO>>>> {
            const localVarAxiosArgs = await HouseholdRecipeApiAxiosParamCreator(configuration).getHouseholdRecipes(householdId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Removes a recipe from a household. It will no longer be bookmarked in that household.
         * @summary Removes a recipe from a household
         * @param {number} householdId ID of the household to add the recipe to
         * @param {number} id ID of the recipe to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeHouseholdRecipe(householdId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await HouseholdRecipeApiAxiosParamCreator(configuration).removeHouseholdRecipe(householdId, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * HouseholdRecipeApi - factory interface
 * @export
 */
export const HouseholdRecipeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Adds a recipe as bookmarked to the given household.
         * @summary Adds a recipe to a household
         * @param {number} householdId ID of the household to add the recipe to
         * @param {number} id ID of the recipe to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createHouseholdRecipe(householdId: number, id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<HouseholdRecipeDTO>> {
            return HouseholdRecipeApiFp(configuration).createHouseholdRecipe(householdId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a list of all the households that have been added/bookmarked to a given household
         * @summary Gets all the recipes added/bookmarked to a household
         * @param {number} householdId ID of the household to check for ingredients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHouseholdRecipes(householdId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HouseholdRecipeDTO>>> {
            return HouseholdRecipeApiFp(configuration).getHouseholdRecipes(householdId, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes a recipe from a household. It will no longer be bookmarked in that household.
         * @summary Removes a recipe from a household
         * @param {number} householdId ID of the household to add the recipe to
         * @param {number} id ID of the recipe to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeHouseholdRecipe(householdId: number, id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return HouseholdRecipeApiFp(configuration).removeHouseholdRecipe(householdId, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HouseholdRecipeApi - object-oriented interface
 * @export
 * @class HouseholdRecipeApi
 * @extends {BaseAPI}
 */
export class HouseholdRecipeApi extends BaseAPI {
    /**
     * Adds a recipe as bookmarked to the given household.
     * @summary Adds a recipe to a household
     * @param {number} householdId ID of the household to add the recipe to
     * @param {number} id ID of the recipe to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HouseholdRecipeApi
     */
    public async createHouseholdRecipe(householdId: number, id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<HouseholdRecipeDTO>> {
        return HouseholdRecipeApiFp(this.configuration).createHouseholdRecipe(householdId, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets a list of all the households that have been added/bookmarked to a given household
     * @summary Gets all the recipes added/bookmarked to a household
     * @param {number} householdId ID of the household to check for ingredients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HouseholdRecipeApi
     */
    public async getHouseholdRecipes(householdId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<HouseholdRecipeDTO>>> {
        return HouseholdRecipeApiFp(this.configuration).getHouseholdRecipes(householdId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Removes a recipe from a household. It will no longer be bookmarked in that household.
     * @summary Removes a recipe from a household
     * @param {number} householdId ID of the household to add the recipe to
     * @param {number} id ID of the recipe to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HouseholdRecipeApi
     */
    public async removeHouseholdRecipe(householdId: number, id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return HouseholdRecipeApiFp(this.configuration).removeHouseholdRecipe(householdId, id, options).then((request) => request(this.axios, this.basePath));
    }
}
