/* tslint:disable */
/* eslint-disable */
/**
 * Freshify API Documentation
 * An API for creating and managing a household inventory and shopping list. The API is written in Java using the Spring Boot framework. The API uses a MySQL database. The API is documented using Swagger. The API is hosted using Apache. Some useful links: - [The GitLab repository](https://gitlab.stud.idi.ntnu.no/idatt2106-v23-10/smartmat-backend)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: vkbugge@hotmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import {Configuration} from "./configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import globalAxios, {AxiosInstance, AxiosRequestConfig} from "axios";
import {useSessionStore} from "../stores/session";

export const BASE_PATH = import.meta.env.VITE_BACKEND_URI.replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
  csv: ",",
  ssv: " ",
  tsv: "\t",
  pipes: "|",
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
  url: string;
  options: AxiosRequestConfig;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
  protected configuration: Configuration | undefined;

  constructor(
    configuration?: Configuration,
    protected basePath: string = BASE_PATH,
    protected axios: AxiosInstance = globalAxios
  ) {
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath || this.basePath;
    }
    axios.defaults.withCredentials = true;
    this.axios.interceptors.response.use(
      (response) => {
        useSessionStore().refreshNotification();
        return response;
      },
      (error) => {
        if (error.response.status === 401 && useSessionStore().isAuthenticated) {
          useSessionStore().timeout();
        }
        useSessionStore().refreshNotification();
        throw error;
      }
    );
  }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
  name: "RequiredError" = "RequiredError";

  constructor(public field: string, msg?: string) {
    super(msg);
  }
}
